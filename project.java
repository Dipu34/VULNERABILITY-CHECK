package project;
import java.io.BufferedReader;
import java.io.IOException; 
import java.io.InputStreamReader; 
import java.net.InetAddress; 
import java.net.InetSocketAddress; 
import java.net.Socket; 
import java.net.UnknownHostException; 
public class project { 
public static void main(String[] args) { 
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); 
try { 
System.out.print("Enter the target IP address: "); 
String targetIP = reader.readLine(); 
perform(targetIP); 
} catch (IOException e) { 
e.printStackTrace(); 
} 
String targetHost = "localhost"; // Replace with the target IP or hostname 
System.out.println("Scanning for open ports on " + targetHost); 
// Specify the range of ports to scan (e.g., 0 to 65535) 
int startPort = 0; 
int endPort = 65535; 
for (int port = startPort; port <= endPort; port++) { 
if (isPortOpen(targetHost, port)) { 
System.out.println("Open port found: " + port); 
//  further analyze the open port for vulnerabilities 
} 
} 
}
private static boolean isPortOpen(String host, int port) { 
	 try (Socket socket = new Socket()) { 
	 // Timeout is set to 1000 milliseconds (1 second) 
	 socket.connect(new InetSocketAddress(host, port), 1000); 
	 return true; 
	 } catch (IOException e) { 
	 // Port is likely closed 
	 return false; 
	 } 
	 } 
	 private static void perform(String targetIP) { 
	 try { 
	 InetAddress targetAddr = InetAddress.getByName(targetIP); 
	 System.out.println("Scanning vulnerabilities for: " + targetAddr.getHostAddress()); 
	 // Check if the host is reachable 
	 if (targetAddr.isReachable(5000)) { 
	 System.out.println("Host is reachable. Starting vulnerability scan..."); 
	 // Add your vulnerability scanning logic here 
	 // This could include checking open ports, services, etc. 
	 System.out.println("Vulnerability scan completed. No vulnerabilities found."); 
	 } else { 
	 System.out.println("Host is not reachable. Please check the IP address."); 
	 } 
	 } catch (UnknownHostException e) { 
	 System.out.println("Invalid IP address."); 
	 } catch (IOException e) { 
	 e.printStackTrace(); 
	 } 
	 } 
	 }
